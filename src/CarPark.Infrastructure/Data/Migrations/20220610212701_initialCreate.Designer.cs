// <auto-generated />
using System;
using CarPark.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarPark.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CarParkDbContext))]
    [Migration("20220610212701_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CarPark.Core.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date_utc");

                    b.Property<DateTimeOffset?>("DeleteDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_date_utc");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("plate_no");

                    b.Property<DateTimeOffset?>("UpdateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_date_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cars");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_cars_user_id");

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("CarPark.Core.Entities.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid>("CarId")
                        .HasColumnType("char(36)")
                        .HasColumnName("car_id");

                    b.Property<DateTimeOffset>("CreateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date_utc");

                    b.Property<DateTimeOffset?>("DeleteDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_date_utc");

                    b.Property<DateTimeOffset>("DriveInAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("drive_in_at");

                    b.Property<DateTimeOffset>("DriveOutAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("drive_out_at");

                    b.Property<Guid>("ParkingSpotId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parking_spot_id");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("reservation_id");

                    b.Property<DateTimeOffset?>("UpdateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_date_utc");

                    b.HasKey("Id")
                        .HasName("pk_parkings");

                    b.ToTable("parkings", (string)null);
                });

            modelBuilder.Entity("CarPark.Core.Entities.ParkingSpot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date_utc");

                    b.Property<DateTimeOffset?>("DeleteDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_date_utc");

                    b.Property<bool>("InProcess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("in_process");

                    b.Property<DateTimeOffset>("InProcessExpireAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("in_process_expire_at");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("reservation_id");

                    b.Property<string>("SpotName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("spot_name");

                    b.Property<DateTimeOffset?>("UpdateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_date_utc");

                    b.HasKey("Id")
                        .HasName("pk_parking_spots");

                    b.ToTable("parking_spots", (string)null);
                });

            modelBuilder.Entity("CarPark.Core.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CarId")
                        .HasColumnType("char(36)")
                        .HasColumnName("car_id");

                    b.Property<DateTimeOffset>("CreateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date_utc");

                    b.Property<DateTimeOffset?>("DeleteDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_date_utc");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end");

                    b.Property<Guid?>("ParkingSpotId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parking_spot_id");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_date_utc");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("CarId")
                        .HasDatabaseName("ix_reservations_car_id");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("CarPark.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("CarId")
                        .HasColumnType("char(36)")
                        .HasColumnName("car_id");

                    b.Property<DateTimeOffset>("CreateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_date_utc");

                    b.Property<DateTimeOffset?>("DeleteDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delete_date_utc");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("OtherName")
                        .HasColumnType("longtext")
                        .HasColumnName("other_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<DateTimeOffset?>("UpdateDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_date_utc");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CarPark.Core.Entities.Car", b =>
                {
                    b.HasOne("CarPark.Core.Entities.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cars_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarPark.Core.Entities.Reservation", b =>
                {
                    b.HasOne("CarPark.Core.Entities.Car", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_cars_car_id");
                });

            modelBuilder.Entity("CarPark.Core.Entities.Car", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CarPark.Core.Entities.User", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
